{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","len","run","clearTimeout","Item","fun","array","this","noop","process","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask",2,"Q","Signal","action","delay","hasLogs","execute","_deferred","defer","startTimer","_delay","onDelayFinished","promise","_currentState","STATE_ON_TIME","_stateIsOnTimeSignal","dispatch","_requestedAction","fireAction","firedAction","killTimer","STATE_TOO_SOON","reject","resolve","getRequestedAction","destroy","_timer","callback","stateIsOnTimeSignal","../utils/kew","../utils/signals",3,"writeInDiv","Move","constants","signalBus","sample","init","divClass","numMoves","isAutomatedPlayer","chanceOfFailing","_classPostFix","_chain","_chanceOfFailing","_isAutomatedPlayer","addRandomMove","ACTION_FIRED","add","onActionFired","_currentMove","remove","randomAction","ALL_ACTIONS","newMove","start","validateChain","shift","onCurrentMoveIsReady","executeMove","then","moveExecuted","fail","moveFailed","fin","moveFinished","shouldFail","requestedAction","Math","random","message","../utils/sampleArray","../utils/writeInDiv","./Move","./constants","./signalBus",4,"window","addEventListener","onKeyDown","keyCode","ACTION_ENTER","ACTION_UP","ACTION_DOWN","ACTION_LEFT","ACTION_RIGHT",5,6,7,"isPlaying","stop","humanPlayer","datGuiProps","moves","playerDelay","aiPlayer","aiDelay","aiMissChance","gameOver","onError","playerWon","actionHandler","Player","gui","dat","GUI","step","./core/Player","./core/actionHandler","./core/constants","./core/signalBus","./utils/writeInDiv",8,"Promise","onSuccess","onFail","_isPromise","_successFn","_failFn","_scope","_boundArgs","_hasContext","_nextContext","undefined","_currentContext","nextTickCallback","scope","thrown","getNextTickFunction","setNextTickFunction","fn","PromiseStats","errorsEmitted","errorsHandled","resolver","deferred","err","data","isPromise","obj","isPromiseLike","replaceEl","arr","idx","val","replaceElFulfilled","value","state","replaceElRejected","reason","all","promises","isArray","slice","allInternal","outputs","finished","counter","bind","allSettled","spread","delayMsOrVal","opt_delayMs","returnVal","delayMs","fcall","var_args","rootArgs","nfcall","splice","ncall","bindPromise","makeNodeResolver","stats","_handleError","_errorHandled","_useContext","context","clearContext","setContext","getContext","_error","_hasData","_child","_promises","_chainPromise","_onComplete","_data","_withInput","_ended","_withError","thenBound","failBound","spreadBound","onComplete","end","_end","done","onFailure","self","timeoutMs","timeoutMsg","isTimeout","_nextTick","ms","_process",9,"floor",10,"global","SignalBinding","signal","listener","isOnce","listenerContext","priority","_listener","_isOnce","_signal","_priority","validateListener","fnName","replace","_bindings","_prevParams","active","params","paramsArr","handlerReturn","detach","isBound","getListener","getSignal","_destroy","toString","VERSION","memorize","_shouldPropagate","_registerListener","prevIndex","_indexOfListener","_addBinding","cur","has","addOnce","removeAll","getNumListeners","halt","bindings","forget","dispose","signals","define","amd",11,"els","player","document","getElementsByClassName","general","ai","classPostFix","text","innerHTML"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\nvar Q = require('../utils/kew'),\n\tSignal = require('../utils/signals');\n\nmodule.exports = function(action, delay, hasLogs) {\n\n\tvar STATE_TOO_SOON = 0,\n\t\tSTATE_ON_TIME = 1;\n\n\tvar _timer,\n\t\t_deferred,\n\t\t_stateIsOnTimeSignal = new Signal(),\n\t\t_currentState = STATE_TOO_SOON,\n\t\t_requestedAction = action,\n\t\t_delay = delay;\n\n\n\tfunction execute() {\n\n\t\t_deferred = Q.defer();\n\n\t\tstartTimer(_delay, onDelayFinished);\n\n\t\treturn _deferred.promise;\n\t}\n\n\tfunction onDelayFinished() {\n\n\t\t_currentState = STATE_ON_TIME;\n\t\t_stateIsOnTimeSignal.dispatch(_requestedAction);\n\t}\n\n\tfunction fireAction(firedAction) {\n\n\t\tkillTimer();\n\n\t\tif(_currentState === STATE_TOO_SOON) {\n\n\t\t\t_deferred.reject('too soon!');\n\n\t\t} else if(firedAction !== _requestedAction) {\n\n\t\t\t_deferred.reject('wrong action!');\n\n\t\t} else {\n\n\t\t\t_deferred.resolve('success!');\n\t\t}\n\t}\n\n\tfunction getRequestedAction() {\n\n\t\treturn _requestedAction;\n\t}\n\n\tfunction destroy() {\n\n\t\tkillTimer();\n\t}\n\n\tfunction killTimer() {\n\n\t\tclearTimeout(_timer);\n\t}\n\n\tfunction startTimer(delay, callback) {\n\n\t\t_timer = setTimeout(callback, delay);\n\t}\n\n\tthis.stateIsOnTimeSignal = _stateIsOnTimeSignal;\n\tthis.getRequestedAction = getRequestedAction;\n\tthis.fireAction = fireAction;\n\tthis.execute = execute;\n\tthis.destroy = destroy;\n};\n},{\"../utils/kew\":8,\"../utils/signals\":10}],3:[function(require,module,exports){\nvar Q = require('../utils/kew'),\n\twriteInDiv = require('../utils/writeInDiv'),\n\tMove = require('./Move'),\n\tconstants = require('./constants'),\n\tsignalBus = require('./signalBus'),\n\tsample = require('../utils/sampleArray');\n\nmodule.exports = function() {\n\n\tvar _deferred,\n\t\t_classPostFix,\n\t\t_chanceOfFailing,\n\t\t_delay,\n\t\t_chain,\n\t\t_currentMove,\n\t\t_isAutomatedPlayer;\n\n\n\tfunction init(divClass, numMoves, delay, isAutomatedPlayer, chanceOfFailing) {\n\n\t\tvar i = 0;\n\n\t\t_deferred = Q.defer();\n\t\t_classPostFix = divClass;\n\t\t_chain = [];\n\t\t_delay = delay;\n\t\t_chanceOfFailing = chanceOfFailing;\n\t\t_isAutomatedPlayer = isAutomatedPlayer;\n\n\t\tfor(i; i < numMoves; i++) {\n\n\t\t\taddRandomMove();\n\t\t}\n\n\t\tif(!_isAutomatedPlayer) {\n\n\t\t\tsignalBus.ACTION_FIRED.add(onActionFired);\n\t\t}\n\t}\n\n\tfunction destroy() {\n\n\t\tvar i = 0;\n\n\t\tif(_currentMove) {\n\n\t\t\t_currentMove.destroy();\n\t\t}\n\n\t\tfor(i; i < _chain.length; i++) {\n\n\t\t\t_chain[i].destroy();\n\t\t}\n\n\t\t_chain = null;\n\t\tsignalBus.ACTION_FIRED.remove(onActionFired);\n\t}\n\n\tfunction onActionFired(firedAction) {\n\n\t\tif(_currentMove) {\n\n\t\t\t_currentMove.fireAction(firedAction);\n\t\t}\n\t}\n\n\tfunction addRandomMove() {\n\n\t\tvar randomAction = sample(constants.ALL_ACTIONS),\n\t\t\tnewMove = new Move(randomAction, _delay);\n\n\t\t_chain.push(newMove);\n\t}\n\n\tfunction start() {\n\n\t\tvalidateChain();\n\n\t\twriteInDiv(_classPostFix, 'Get READY!');\n\n\t\treturn _deferred.promise;\n\t}\n\n\tfunction validateChain() {\n\n\t\t_currentMove = _chain.shift();\n\n\t\tif(_currentMove) {\n\n\t\t\t_currentMove.stateIsOnTimeSignal.add(onCurrentMoveIsReady);\n\t\t\texecuteMove();\n\n\t\t} else {\n\n\t\t\t_deferred.resolve();\n\t\t}\n\t}\n\n\tfunction executeMove() {\n\n\t\t_currentMove.execute()\n\t\t\t.then(moveExecuted)\n\t\t\t.fail(moveFailed)\n\t\t\t.fin(moveFinished)\n\t}\n\n\tfunction onCurrentMoveIsReady() {\n\n\t\tvar requestedAction = _currentMove.getRequestedAction(),\n\t\t\tshouldFail;\n\n\t\tif(_isAutomatedPlayer) {\n\n\t\t\tshouldFail = Math.random() < _chanceOfFailing;\n\n\t\t\tif(shouldFail) {\n\n\t\t\t\t_currentMove.fireAction();\n\n\t\t\t} else {\n\n\t\t\t\t_currentMove.fireAction(requestedAction);\n\t\t\t}\n\n\t\t} else {\n\n\t\t\twriteInDiv(_classPostFix, 'FIRE! ' + requestedAction);\n\t\t}\n\t}\n\n\tfunction moveExecuted() {\n\n\t\tif(_isAutomatedPlayer) {\n\n\t\t\twriteInDiv(_classPostFix, 'AI has ' + _chain.length + ' moves left');\n\n\t\t} else {\n\n\t\t\twriteInDiv(_classPostFix, 'Got it!');\n\t\t}\n\t}\n\n\tfunction moveFailed(message) {\n\n\t\tif(!_isAutomatedPlayer) {\n\n\t\t\twriteInDiv(_classPostFix, 'Woops, ' + message);\n\n\t\t} else {\n\n\t\t\twriteInDiv(_classPostFix, 'AI missed!');\n\t\t}\n\n\t\taddRandomMove();\n\t}\n\n\tfunction moveFinished() {\n\n\t\t_currentMove.destroy();\n\t\tvalidateChain();\n\t}\n\n\tthis.init = init;\n\tthis.start = start;\n\tthis.destroy = destroy;\n};\n},{\"../utils/kew\":8,\"../utils/sampleArray\":9,\"../utils/writeInDiv\":11,\"./Move\":2,\"./constants\":5,\"./signalBus\":6}],4:[function(require,module,exports){\nvar constants = require('./constants'),\n\tsignalBus = require('./signalBus');\n\nfunction init() {\n\n\twindow.addEventListener('keydown', onKeyDown);\n}\n\nfunction onKeyDown(e) {\n\n\tvar action;\n\n\tswitch(e.keyCode) {\n\n\t\tcase 13: action = constants.ACTION_ENTER; break;\n\n\t\tcase 38: action = constants.ACTION_UP; break;\n\t\tcase 40: action = constants.ACTION_DOWN; break;\n\t\tcase 37: action = constants.ACTION_LEFT; break;\n\t\tcase 39: action = constants.ACTION_RIGHT; break;\n\t}\n\n\tsignalBus.ACTION_FIRED.dispatch(action);\n}\n\nexports.init = init;\n},{\"./constants\":5,\"./signalBus\":6}],5:[function(require,module,exports){\nvar ACTION_UP = 'ACTION_UP',\n\tACTION_ENTER = 'ACTION_ENTER',\n\tACTION_DOWN = 'ACTION_DOWN',\n\tACTION_LEFT = 'ACTION_LEFT',\n\tACTION_RIGHT = 'ACTION_RIGHT';\n\nexports.ACTION_ENTER = ACTION_ENTER;\nexports.ACTION_UP = ACTION_UP;\nexports.ACTION_DOWN = ACTION_DOWN;\nexports.ACTION_LEFT = ACTION_LEFT;\nexports.ACTION_RIGHT = ACTION_RIGHT;\nexports.ALL_ACTIONS = [ACTION_UP, ACTION_DOWN, ACTION_LEFT, ACTION_RIGHT];\n\n\n},{}],6:[function(require,module,exports){\nvar Signal = require('../utils/signals');\n\nexports.ACTION_FIRED = new Signal();\n},{\"../utils/signals\":10}],7:[function(require,module,exports){\nvar actionHandler = require('./core/actionHandler'),\n\tsignalBus = require('./core/signalBus'),\n\twriteInDiv = require('./utils/writeInDiv'),\n\tconstants = require('./core/constants'),\n\tPlayer = require('./core/Player');\n\n\nvar humanPlayer = new Player(),\n\taiPlayer = new Player(),\n\tisPlaying = false,\n\tdatGuiProps = new function() {\n\n\t\tthis.moves = 5;\n\t\tthis.playerDelay = 1000;\n\t\tthis.aiDelay = 2000;\n\t\tthis.aiMissChance = 0.1;\n\n\t\tthis.start = start;\n\t\tthis.stop = stop;\n\t}();\n\nvar gui = new dat.GUI();\ngui.add(datGuiProps, 'moves', 0, 10).step(1);\ngui.add(datGuiProps, 'playerDelay', 0, 5000).step(100);\ngui.add(datGuiProps, 'aiDelay', 0, 5000).step(100);\ngui.add(datGuiProps, 'aiMissChance', 0, 1).step(0.05);\ngui.add(datGuiProps, 'start');\ngui.add(datGuiProps, 'stop');\n\nwriteInDiv('general', 'Press `ENTER` to start');\nactionHandler.init();\n\nsignalBus.ACTION_FIRED.add(onActionFired);\n\nfunction onActionFired(action) {\n\n\tif(action === constants.ACTION_ENTER) {\n\n\t\tif(!isPlaying) {\n\n\t\t\tstart();\n\n\t\t} else {\n\n\t\t\tstop();\n\t\t}\n\t}\n}\n\nfunction start() {\n\n\tif(isPlaying) {\n\n\t\tstop();\n\t}\n\n\twriteInDiv('general', '');\n\n\tisPlaying = true;\n\thumanPlayer.init('player', datGuiProps.moves, datGuiProps.playerDelay, false);\n\taiPlayer.init('ai', datGuiProps.moves, datGuiProps.aiDelay, true, datGuiProps.aiMissChance);\n\n\thumanPlayer.start()\n\t\t.then(function(){\n\t\t\tgameOver(true);\n\t\t}).fail(onError);\n\taiPlayer.start()\n\t\t.then(function(){\n\n\t\t\tgameOver(false);\n\t\t}).fail(onError);\n}\n\nfunction onError(e) {\n\tconsole.error(e);\n}\n\nfunction gameOver(playerWon) {\n\n\twriteInDiv('player', '');\n\twriteInDiv('ai', '');\n\tif(playerWon) {\n\n\t\twriteInDiv('general', 'You won!<br>Press `ENTER` to replay');\n\n\t} else {\n\n\t\twriteInDiv('general', 'You lost...<br>Press `ENTER` to replay');\n\t}\n\n\tstop();\n}\n\nfunction stop() {\n\n\tisPlaying = false;\n\n\thumanPlayer.destroy();\n\taiPlayer.destroy();\n}\n},{\"./core/Player\":3,\"./core/actionHandler\":4,\"./core/constants\":5,\"./core/signalBus\":6,\"./utils/writeInDiv\":11}],8:[function(require,module,exports){\n(function (process){\n\n/**\n * An object representing a \"promise\" for a future value\n *\n * @param {?function(T, ?)=} onSuccess a function to handle successful\n *     resolution of this promise\n * @param {?function(!Error, ?)=} onFail a function to handle failed\n *     resolution of this promise\n * @constructor\n * @template T\n */\nfunction Promise(onSuccess, onFail) {\n  this.promise = this\n  this._isPromise = true\n  this._successFn = onSuccess\n  this._failFn = onFail\n  this._scope = this\n  this._boundArgs = null\n  this._hasContext = false\n  this._nextContext = undefined\n  this._currentContext = undefined\n}\n\n/**\n * @param {function()} callback\n */\nfunction nextTick (callback) {\n  callback()\n}\n\nif (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n  nextTick = process.nextTick\n}\n\n/**\n * All callback execution should go through this function.  While the\n * implementation below is simple, it can be replaced with more sophisticated\n * implementations that enforce QoS on the event loop.\n *\n * @param {Promise} defer\n * @param {Function} callback\n * @param {Object|undefined} scope\n * @param {Array} args\n */\nfunction nextTickCallback (defer, callback, scope, args) {\n  try {\n    defer.resolve(callback.apply(scope, args))\n  } catch (thrown) {\n    defer.reject(thrown)\n  }\n}\n\n/**\n * Used for accessing the nextTick function from outside the kew module.\n *\n * @return {Function}\n */\nfunction getNextTickFunction () {\n  return nextTick\n}\n\n/**\n * Used for overriding the nextTick function from outside the kew module so that\n * the user can plug and play lower level schedulers\n * @param {!Function} fn\n */\nfunction setNextTickFunction (fn) {\n  nextTick = fn\n}\n\n/**\n * Keep track of the number of promises that are rejected along side\n * the number of rejected promises we call _failFn on so we can look\n * for leaked rejections.\n * @constructor\n */\nfunction PromiseStats() {\n  /** @type {number} */\n  this.errorsEmitted = 0\n\n  /** @type {number} */\n  this.errorsHandled = 0\n}\n\nvar stats = new PromiseStats()\n\nPromise.prototype._handleError = function () {\n  if (!this._errorHandled) {\n    stats.errorsHandled++\n    this._errorHandled = true\n  }\n}\n\n/**\n * Specify that the current promise should have a specified context\n * @param  {*} context context\n * @private\n */\nPromise.prototype._useContext = function (context) {\n  this._nextContext = this._currentContext = context\n  this._hasContext = true\n  return this\n}\n\nPromise.prototype.clearContext = function () {\n  this._hasContext = false\n  this._nextContext = undefined\n  return this\n}\n\n/**\n * Set the context for all promise handlers to follow\n *\n * NOTE(dpup): This should be considered deprecated.  It does not do what most\n * people would expect.  The context will be passed as a second argument to all\n * subsequent callbacks.\n *\n * @param {*} context An arbitrary context\n */\nPromise.prototype.setContext = function (context) {\n  this._nextContext = context\n  this._hasContext = true\n  return this\n}\n\n/**\n * Get the context for a promise\n * @return {*} the context set by setContext\n */\nPromise.prototype.getContext = function () {\n  return this._nextContext\n}\n\n/**\n * Resolve this promise with a specified value\n *\n * @param {*=} data\n */\nPromise.prototype.resolve = function (data) {\n  if (this._error || this._hasData) throw new Error(\"Unable to resolve or reject the same promise twice\")\n\n  var i\n  if (data && isPromise(data)) {\n    this._child = data\n    if (this._promises) {\n      for (i = 0; i < this._promises.length; i += 1) {\n        data._chainPromise(this._promises[i])\n      }\n      delete this._promises\n    }\n\n    if (this._onComplete) {\n      for (i = 0; i < this._onComplete.length; i+= 1) {\n        data.fin(this._onComplete[i])\n      }\n      delete this._onComplete\n    }\n  } else if (data && isPromiseLike(data)) {\n    data.then(\n      function(data) { this.resolve(data) }.bind(this),\n      function(err) { this.reject(err) }.bind(this)\n    )\n  } else {\n    this._hasData = true\n    this._data = data\n\n    if (this._onComplete) {\n      for (i = 0; i < this._onComplete.length; i++) {\n        this._onComplete[i]()\n      }\n    }\n\n    if (this._promises) {\n      for (i = 0; i < this._promises.length; i += 1) {\n        this._promises[i]._useContext(this._nextContext)\n        this._promises[i]._withInput(data)\n      }\n      delete this._promises\n    }\n  }\n}\n\n/**\n * Reject this promise with an error\n *\n * @param {!Error} e\n */\nPromise.prototype.reject = function (e) {\n  if (this._error || this._hasData) throw new Error(\"Unable to resolve or reject the same promise twice\")\n\n  var i\n  this._error = e\n  stats.errorsEmitted++\n\n  if (this._ended) {\n    this._handleError()\n    process.nextTick(function onPromiseThrow() {\n      throw e\n    })\n  }\n\n  if (this._onComplete) {\n    for (i = 0; i < this._onComplete.length; i++) {\n      this._onComplete[i]()\n    }\n  }\n\n  if (this._promises) {\n    this._handleError()\n    for (i = 0; i < this._promises.length; i += 1) {\n      this._promises[i]._useContext(this._nextContext)\n      this._promises[i]._withError(e)\n    }\n    delete this._promises\n  }\n}\n\n/**\n * Provide a callback to be called whenever this promise successfully\n * resolves. Allows for an optional second callback to handle the failure\n * case.\n *\n * @param {?function(this:void, T, ?): RESULT|undefined} onSuccess\n * @param {?function(this:void, !Error, ?): RESULT=} onFail\n * @return {!Promise.<RESULT>} returns a new promise with the output of the onSuccess or\n *     onFail handler\n * @template RESULT\n */\nPromise.prototype.then = function (onSuccess, onFail) {\n  var promise = new Promise(onSuccess, onFail)\n  if (this._nextContext) promise._useContext(this._nextContext)\n\n  if (this._child) this._child._chainPromise(promise)\n  else this._chainPromise(promise)\n\n  return promise\n}\n\n/**\n * Provide a callback to be called whenever this promise successfully\n * resolves. The callback will be executed in the context of the provided scope.\n *\n * @param {function(this:SCOPE, ...): RESULT} onSuccess\n * @param {SCOPE} scope Object whose context callback will be executed in.\n * @param {...*} var_args Additional arguments to be passed to the promise callback.\n * @return {!Promise.<RESULT>} returns a new promise with the output of the onSuccess\n * @template SCOPE, RESULT\n */\nPromise.prototype.thenBound = function (onSuccess, scope, var_args) {\n  var promise = new Promise(onSuccess)\n  if (this._nextContext) promise._useContext(this._nextContext)\n\n  promise._scope = scope\n  if (arguments.length > 2) {\n    promise._boundArgs = Array.prototype.slice.call(arguments, 2)\n  }\n\n  // Chaining must happen after setting args and scope since it may fire callback.\n  if (this._child) this._child._chainPromise(promise)\n  else this._chainPromise(promise)\n\n  return promise\n}\n\n/**\n * Provide a callback to be called whenever this promise is rejected\n *\n * @param {function(this:void, !Error, ?)} onFail\n * @return {!Promise.<T>} returns a new promise with the output of the onFail handler\n */\nPromise.prototype.fail = function (onFail) {\n  return this.then(null, onFail)\n}\n\n/**\n * Provide a callback to be called whenever this promise is rejected.\n * The callback will be executed in the context of the provided scope.\n *\n * @param {function(this:SCOPE, ...)} onFail\n * @param {SCOPE} scope Object whose context callback will be executed in.\n * @param {...?} var_args\n * @return {!Promise.<T>} returns a new promise with the output of the onSuccess\n * @template SCOPE\n */\nPromise.prototype.failBound = function (onFail, scope, var_args) {\n  var promise = new Promise(null, onFail)\n  if (this._nextContext) promise._useContext(this._nextContext)\n\n  promise._scope = scope\n  if (arguments.length > 2) {\n    promise._boundArgs = Array.prototype.slice.call(arguments, 2)\n  }\n\n  // Chaining must happen after setting args and scope since it may fire callback.\n  if (this._child) this._child._chainPromise(promise)\n  else this._chainPromise(promise)\n\n  return promise\n}\n\n/**\n * Spread a promises outputs to the functions arguments.\n * @param {?function(this:void, ...): RESULT|undefined} onSuccess\n * @return {!Promise.<RESULT>} returns a new promise with the output of the onSuccess or\n *     onFail handler\n * @template RESULT\n */\nPromise.prototype.spread = function (onSuccess) {\n  return this.then(allInternal)\n  .then(function (array) {\n    return onSuccess.apply(null, array)\n  })\n}\n\n/**\n * Spread a promises outputs to the functions arguments.\n * @param {function(this:SCOPE, ...): RESULT} onSuccess\n * @param {SCOPE} scope Object whose context callback will be executed in.\n * @param {...*} var_args Additional arguments to be passed to the promise callback.\n * @return {!Promise.<RESULT>} returns a new promise with the output of the onSuccess\n * @template SCOPE, RESULT\n */\nPromise.prototype.spreadBound = function (onSuccess, scope, var_args) {\n  var args = Array.prototype.slice.call(arguments, 2)\n  return this.then(allInternal)\n  .then(function (array) {\n    return onSuccess.apply(scope, args.concat(array))\n  })\n}\n\n/**\n * Provide a callback to be called whenever this promise is either resolved\n * or rejected.\n *\n * @param {function()} onComplete\n * @return {!Promise.<T>} returns the current promise\n */\nPromise.prototype.fin = function (onComplete) {\n  if (this._hasData || this._error) {\n    onComplete()\n    return this\n  }\n\n  if (this._child) {\n    this._child.fin(onComplete)\n  } else {\n    if (!this._onComplete) this._onComplete = [onComplete]\n    else this._onComplete.push(onComplete)\n  }\n\n  return this\n}\n\n/**\n * Mark this promise as \"ended\". If the promise is rejected, this will throw an\n * error in whatever scope it happens to be in\n *\n * @return {!Promise.<T>} returns the current promise\n * @deprecated Prefer done(), because it's consistent with Q.\n */\nPromise.prototype.end = function () {\n  this._end()\n  return this\n}\n\n\n/**\n * Mark this promise as \"ended\".\n * @private\n */\nPromise.prototype._end = function () {\n  if (this._error) {\n    this._handleError()\n    throw this._error\n  }\n  this._ended = true\n  return this\n}\n\n/**\n * Close the promise. Any errors after this completes will be thrown to the global handler.\n *\n * @param {?function(this:void, T, ?)=} onSuccess a function to handle successful\n *     resolution of this promise\n * @param {?function(this:void, !Error, ?)=} onFailure a function to handle failed\n *     resolution of this promise\n * @return {void}\n */\nPromise.prototype.done = function (onSuccess, onFailure) {\n  var self = this\n  if (onSuccess || onFailure) {\n    self = self.then(onSuccess, onFailure)\n  }\n  self._end()\n}\n\n/**\n * Return a new promise that behaves the same as the current promise except\n * that it will be rejected if the current promise does not get fulfilled\n * after a certain amount of time.\n *\n * @param {number} timeoutMs The timeout threshold in msec\n * @param {string=} timeoutMsg error message\n * @return {!Promise.<T>} a new promise with timeout\n */\n Promise.prototype.timeout = function (timeoutMs, timeoutMsg) {\n  var deferred = new Promise()\n  var isTimeout = false\n\n  var timeout = setTimeout(function() {\n    deferred.reject(new Error(timeoutMsg || 'Promise timeout after ' + timeoutMs + ' ms.'))\n    isTimeout = true\n  }, timeoutMs)\n\n  this.then(function (data) {\n    if (!isTimeout) {\n      clearTimeout(timeout)\n      deferred.resolve(data)\n    }\n  },\n  function (err) {\n    if (!isTimeout) {\n      clearTimeout(timeout)\n      deferred.reject(err)\n    }\n  })\n\n  return deferred.promise\n}\n\n/**\n * Attempt to resolve this promise with the specified input\n *\n * @param {*} data the input\n */\nPromise.prototype._withInput = function (data) {\n  if (this._successFn) {\n    this._nextTick(this._successFn, [data, this._currentContext])\n  } else {\n    this.resolve(data)\n  }\n\n  // context is no longer needed\n  delete this._currentContext\n}\n\n/**\n * Attempt to reject this promise with the specified error\n *\n * @param {!Error} e\n * @private\n */\nPromise.prototype._withError = function (e) {\n  if (this._failFn) {\n    this._nextTick(this._failFn, [e, this._currentContext])\n  } else {\n    this.reject(e)\n  }\n\n  // context is no longer needed\n  delete this._currentContext\n}\n\n/**\n * Calls a function in the correct scope, and includes bound arguments.\n * @param {Function} fn\n * @param {Array} args\n * @private\n */\nPromise.prototype._nextTick = function (fn, args) {\n  if (this._boundArgs) {\n    args = this._boundArgs.concat(args)\n  }\n  nextTick(nextTickCallback.bind(null, this, fn, this._scope, args))\n}\n\n/**\n * Chain a promise to the current promise\n *\n * @param {!Promise} promise the promise to chain\n * @private\n */\nPromise.prototype._chainPromise = function (promise) {\n  var i\n  if (this._hasContext) promise._useContext(this._nextContext)\n\n  if (this._child) {\n    this._child._chainPromise(promise)\n  } else if (this._hasData) {\n    promise._withInput(this._data)\n  } else if (this._error) {\n    // We can't rely on _withError() because it's called on the chained promises\n    // and we need to use the source's _errorHandled state\n    this._handleError()\n    promise._withError(this._error)\n  } else if (!this._promises) {\n    this._promises = [promise]\n  } else {\n    this._promises.push(promise)\n  }\n}\n\n/**\n * Utility function used for creating a node-style resolver\n * for deferreds\n *\n * @param {!Promise} deferred a promise that looks like a deferred\n * @param {Error=} err an optional error\n * @param {*=} data optional data\n */\nfunction resolver(deferred, err, data) {\n  if (err) deferred.reject(err)\n  else deferred.resolve(data)\n}\n\n/**\n * Creates a node-style resolver for a deferred by wrapping\n * resolver()\n *\n * @return {function(?Error, *)} node-style callback\n */\nPromise.prototype.makeNodeResolver = function () {\n  return resolver.bind(null, this)\n}\n\n/**\n * Return true iff the given object is a promise of this library.\n *\n * Because kew's API is slightly different than other promise libraries,\n * it's important that we have a test for its promise type. If you want\n * to test for a more general A+ promise, you should do a cap test for\n * the features you want.\n *\n * @param {*} obj The object to test\n * @return {boolean} Whether the object is a promise\n */\nfunction isPromise(obj) {\n  return !!obj._isPromise\n}\n\n/**\n * Return true iff the given object is a promise-like object, e.g. appears to\n * implement Promises/A+ specification\n *\n * @param {*} obj The object to test\n * @return {boolean} Whether the object is a promise-like object\n */\nfunction isPromiseLike(obj) {\n  return (typeof obj === 'object' || typeof obj === 'function') &&\n    typeof obj.then === 'function'\n}\n\n/**\n * Static function which creates and resolves a promise immediately\n *\n * @param {T} data data to resolve the promise with\n * @return {!Promise.<T>}\n * @template T\n */\nfunction resolve(data) {\n  var promise = new Promise()\n  promise.resolve(data)\n  return promise\n}\n\n/**\n * Static function which creates and rejects a promise immediately\n *\n * @param {!Error} e error to reject the promise with\n * @return {!Promise}\n */\nfunction reject(e) {\n  var promise = new Promise()\n  promise.reject(e)\n  return promise\n}\n\n/**\n * Replace an element in an array with a new value. Used by .all() to\n * call from .then()\n *\n * @param {!Array} arr\n * @param {number} idx\n * @param {*} val\n * @return {*} the val that's being injected into the array\n */\nfunction replaceEl(arr, idx, val) {\n  arr[idx] = val\n  return val\n}\n\n/**\n * Replace an element in an array as it is resolved with its value.\n * Used by .allSettled().\n *\n * @param {!Array} arr\n * @param {number} idx\n * @param {*} value The value from a resolved promise.\n * @return {*} the data that's being passed in\n */\nfunction replaceElFulfilled(arr, idx, value) {\n  arr[idx] = {\n    state: 'fulfilled',\n    value: value\n  }\n  return value\n}\n\n/**\n * Replace an element in an array as it is rejected with the reason.\n * Used by .allSettled().\n *\n * @param {!Array} arr\n * @param {number} idx\n * @param {*} reason The reason why the original promise is rejected\n * @return {*} the data that's being passed in\n */\nfunction replaceElRejected(arr, idx, reason) {\n  arr[idx] = {\n    state: 'rejected',\n    reason: reason\n  }\n  return reason\n}\n\n/**\n * Takes in an array of promises or literals and returns a promise which returns\n * an array of values when all have resolved. If any fail, the promise fails.\n *\n * @param {!Array.<!Promise>} promises\n * @return {!Promise.<!Array>}\n */\nfunction all(promises) {\n  if (arguments.length != 1 || !Array.isArray(promises)) {\n    promises = Array.prototype.slice.call(arguments, 0)\n  }\n  return allInternal(promises)\n}\n\n/**\n * A version of all() that does not accept var_args\n *\n * @param {!Array.<!Promise>} promises\n * @return {!Promise.<!Array>}\n */\nfunction allInternal(promises) {\n  if (!promises.length) return resolve([])\n\n  var outputs = []\n  var finished = false\n  var promise = new Promise()\n  var counter = promises.length\n\n  for (var i = 0; i < promises.length; i += 1) {\n    if (!promises[i] || !isPromiseLike(promises[i])) {\n      outputs[i] = promises[i]\n      counter -= 1\n    } else {\n      promises[i].then(replaceEl.bind(null, outputs, i))\n      .then(function decrementAllCounter() {\n        counter--\n        if (!finished && counter === 0) {\n          finished = true\n          promise.resolve(outputs)\n        }\n      }, function onAllError(e) {\n        if (!finished) {\n          finished = true\n          promise.reject(e)\n        }\n      })\n    }\n  }\n\n  if (counter === 0 && !finished) {\n    finished = true\n    promise.resolve(outputs)\n  }\n\n  return promise\n}\n\n/**\n * Takes in an array of promises or values and returns a promise that is\n * fulfilled with an array of state objects when all have resolved or\n * rejected. If a promise is resolved, its corresponding state object is\n * {state: 'fulfilled', value: Object}; whereas if a promise is rejected, its\n * corresponding state object is {state: 'rejected', reason: Object}.\n *\n * @param {!Array} promises or values\n * @return {!Promise.<!Array>} Promise fulfilled with state objects for each input\n */\nfunction allSettled(promises) {\n  if (!Array.isArray(promises)) {\n    throw Error('The input to \"allSettled()\" should be an array of Promise or values')\n  }\n  if (!promises.length) return resolve([])\n\n  var outputs = []\n  var promise = new Promise()\n  var counter = promises.length\n\n  for (var i = 0; i < promises.length; i += 1) {\n    if (!promises[i] || !isPromiseLike(promises[i])) {\n      replaceElFulfilled(outputs, i, promises[i])\n      if ((--counter) === 0) promise.resolve(outputs)\n    } else {\n      promises[i]\n        .then(replaceElFulfilled.bind(null, outputs, i), replaceElRejected.bind(null, outputs, i))\n        .then(function () {\n          if ((--counter) === 0) promise.resolve(outputs)\n        })\n    }\n  }\n\n  return promise\n}\n\n/**\n * Takes an array of results and spreads them to the arguments of a function.\n * @param {!Array} array\n * @param {!Function} fn\n */\nfunction spread(array, fn) {\n  resolve(array).spread(fn)\n}\n\n/**\n * Create a new Promise which looks like a deferred\n *\n * @return {!Promise}\n */\nfunction defer() {\n  return new Promise()\n}\n\n/**\n * Return a promise which will wait a specified number of ms to resolve\n *\n * @param {*} delayMsOrVal A delay (in ms) if this takes one argument, or ther\n *     return value if it takes two.\n * @param {number=} opt_delayMs\n * @return {!Promise}\n */\nfunction delay(delayMsOrVal, opt_delayMs) {\n  var returnVal = undefined\n  var delayMs = delayMsOrVal\n  if (typeof opt_delayMs != 'undefined') {\n    delayMs = opt_delayMs\n    returnVal = delayMsOrVal\n  }\n\n  if (typeof delayMs != 'number') {\n    throw new Error('Bad delay value ' + delayMs)\n  }\n\n  var defer = new Promise()\n  setTimeout(function onDelay() {\n    defer.resolve(returnVal)\n  }, delayMs)\n  return defer\n}\n\n/**\n * Returns a promise that has the same result as `this`, but fulfilled\n * after at least ms milliseconds\n * @param {number} ms\n */\nPromise.prototype.delay = function (ms) {\n  return this.then(function (val) {\n    return delay(val, ms)\n  })\n}\n\n/**\n * Return a promise which will evaluate the function fn in a future turn with\n * the provided args\n *\n * @param {function(...)} fn\n * @param {...*} var_args a variable number of arguments\n * @return {!Promise}\n */\nfunction fcall(fn, var_args) {\n  var rootArgs = Array.prototype.slice.call(arguments, 1)\n  var defer = new Promise()\n  nextTick(nextTickCallback.bind(null, defer, fn, undefined, rootArgs))\n  return defer\n}\n\n\n/**\n * Returns a promise that will be invoked with the result of a node style\n * callback. All args to fn should be given except for the final callback arg\n *\n * @param {function(...)} fn\n * @param {...*} var_args a variable number of arguments\n * @return {!Promise}\n */\nfunction nfcall(fn, var_args) {\n  // Insert an undefined argument for scope and let bindPromise() do the work.\n  var args = Array.prototype.slice.call(arguments, 0)\n  args.splice(1, 0, undefined)\n  return ncall.apply(undefined, args)\n}\n\n\n/**\n * Like `nfcall`, but permits passing a `this` context for the call.\n *\n * @param {function(...)} fn\n * @param {Object} scope\n * @param {...*} var_args\n * @return {!Promise}\n */\nfunction ncall(fn, scope, var_args) {\n  return bindPromise.apply(null, arguments)()\n}\n\n\n/**\n * Binds a function to a scope with an optional number of curried arguments. Attaches\n * a node style callback as the last argument and returns a promise\n *\n * @param {function(...)} fn\n * @param {Object} scope\n * @param {...*} var_args a variable number of arguments\n * @return {function(...)}: !Promise}\n */\nfunction bindPromise(fn, scope, var_args) {\n  var rootArgs = Array.prototype.slice.call(arguments, 2)\n  return function onBoundPromise(var_args) {\n    var defer = new Promise()\n    try {\n      fn.apply(scope, rootArgs.concat(Array.prototype.slice.call(arguments, 0), defer.makeNodeResolver()))\n    } catch (e) {\n      defer.reject(e)\n    }\n    return defer\n  }\n}\n\nmodule.exports = {\n  all: all,\n  bindPromise: bindPromise,\n  defer: defer,\n  delay: delay,\n  fcall: fcall,\n  isPromise: isPromise,\n  isPromiseLike: isPromiseLike,\n  ncall: ncall,\n  nfcall: nfcall,\n  resolve: resolve,\n  reject: reject,\n  spread: spread,\n  stats: stats,\n  allSettled: allSettled,\n  Promise: Promise,\n  getNextTickFunction: getNextTickFunction,\n  setNextTickFunction: setNextTickFunction,\n}\n\n}).call(this,require('_process'))\n\n},{\"_process\":1}],9:[function(require,module,exports){\nmodule.exports = function(array) {\n\n\treturn array[Math.floor(Math.random()*array.length)];\n};\n},{}],10:[function(require,module,exports){\n/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */\n/*global define:false, require:false, exports:false, module:false, signals:false */\n\n/** @license\n * JS Signals <http://millermedeiros.github.com/js-signals/>\n * Released under the MIT license\n * Author: Miller Medeiros\n * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)\n */\n\n(function(global){\n\n    // SignalBinding -------------------------------------------------\n    //================================================================\n\n    /**\n     * Object that represents a binding between a Signal and a listener function.\n     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>\n     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.\n     * @author Miller Medeiros\n     * @constructor\n     * @internal\n     * @name SignalBinding\n     * @param {Signal} signal Reference to Signal object that listener is currently bound to.\n     * @param {Function} listener Handler function bound to the signal.\n     * @param {boolean} isOnce If binding should be executed just once.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. (default = 0).\n     */\n    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {\n\n        /**\n         * Handler function bound to the signal.\n         * @type Function\n         * @private\n         */\n        this._listener = listener;\n\n        /**\n         * If binding should be executed just once.\n         * @type boolean\n         * @private\n         */\n        this._isOnce = isOnce;\n\n        /**\n         * Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @memberOf SignalBinding.prototype\n         * @name context\n         * @type Object|undefined|null\n         */\n        this.context = listenerContext;\n\n        /**\n         * Reference to Signal object that listener is currently bound to.\n         * @type Signal\n         * @private\n         */\n        this._signal = signal;\n\n        /**\n         * Listener priority\n         * @type Number\n         * @private\n         */\n        this._priority = priority || 0;\n    }\n\n    SignalBinding.prototype = {\n\n        /**\n         * If binding is active and should be executed.\n         * @type boolean\n         */\n        active : true,\n\n        /**\n         * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)\n         * @type Array|null\n         */\n        params : null,\n\n        /**\n         * Call listener passing arbitrary parameters.\n         * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>\n         * @param {Array} [paramsArr] Array of parameters that should be passed to the listener\n         * @return {*} Value returned by the listener.\n         */\n        execute : function (paramsArr) {\n            var handlerReturn, params;\n            if (this.active && !!this._listener) {\n                params = this.params? this.params.concat(paramsArr) : paramsArr;\n                handlerReturn = this._listener.apply(this.context, params);\n                if (this._isOnce) {\n                    this.detach();\n                }\n            }\n            return handlerReturn;\n        },\n\n        /**\n         * Detach binding from signal.\n         * - alias to: mySignal.remove(myBinding.getListener());\n         * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.\n         */\n        detach : function () {\n            return this.isBound()? this._signal.remove(this._listener, this.context) : null;\n        },\n\n        /**\n         * @return {Boolean} `true` if binding is still bound to the signal and have a listener.\n         */\n        isBound : function () {\n            return (!!this._signal && !!this._listener);\n        },\n\n        /**\n         * @return {boolean} If SignalBinding will only be executed once.\n         */\n        isOnce : function () {\n            return this._isOnce;\n        },\n\n        /**\n         * @return {Function} Handler function bound to the signal.\n         */\n        getListener : function () {\n            return this._listener;\n        },\n\n        /**\n         * @return {Signal} Signal that listener is currently bound to.\n         */\n        getSignal : function () {\n            return this._signal;\n        },\n\n        /**\n         * Delete instance properties\n         * @private\n         */\n        _destroy : function () {\n            delete this._signal;\n            delete this._listener;\n            delete this.context;\n        },\n\n        /**\n         * @return {string} String representation of the object.\n         */\n        toString : function () {\n            return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';\n        }\n\n    };\n\n\n/*global SignalBinding:false*/\n\n    // Signal --------------------------------------------------------\n    //================================================================\n\n    function validateListener(listener, fnName) {\n        if (typeof listener !== 'function') {\n            throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );\n        }\n    }\n\n    /**\n     * Custom event broadcaster\n     * <br />- inspired by Robert Penner's AS3 Signals.\n     * @name Signal\n     * @author Miller Medeiros\n     * @constructor\n     */\n    function Signal() {\n        /**\n         * @type Array.<SignalBinding>\n         * @private\n         */\n        this._bindings = [];\n        this._prevParams = null;\n\n        // enforce dispatch to aways work on same context (#47)\n        var self = this;\n        this.dispatch = function(){\n            Signal.prototype.dispatch.apply(self, arguments);\n        };\n    }\n\n    Signal.prototype = {\n\n        /**\n         * Signals Version Number\n         * @type String\n         * @const\n         */\n        VERSION : '1.0.0',\n\n        /**\n         * If Signal should keep record of previously dispatched parameters and\n         * automatically execute listener during `add()`/`addOnce()` if Signal was\n         * already dispatched before.\n         * @type boolean\n         */\n        memorize : false,\n\n        /**\n         * @type boolean\n         * @private\n         */\n        _shouldPropagate : true,\n\n        /**\n         * If Signal is active and should broadcast events.\n         * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>\n         * @type boolean\n         */\n        active : true,\n\n        /**\n         * @param {Function} listener\n         * @param {boolean} isOnce\n         * @param {Object} [listenerContext]\n         * @param {Number} [priority]\n         * @return {SignalBinding}\n         * @private\n         */\n        _registerListener : function (listener, isOnce, listenerContext, priority) {\n\n            var prevIndex = this._indexOfListener(listener, listenerContext),\n                binding;\n\n            if (prevIndex !== -1) {\n                binding = this._bindings[prevIndex];\n                if (binding.isOnce() !== isOnce) {\n                    throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');\n                }\n            } else {\n                binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);\n                this._addBinding(binding);\n            }\n\n            if(this.memorize && this._prevParams){\n                binding.execute(this._prevParams);\n            }\n\n            return binding;\n        },\n\n        /**\n         * @param {SignalBinding} binding\n         * @private\n         */\n        _addBinding : function (binding) {\n            //simplified insertion sort\n            var n = this._bindings.length;\n            do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);\n            this._bindings.splice(n + 1, 0, binding);\n        },\n\n        /**\n         * @param {Function} listener\n         * @return {number}\n         * @private\n         */\n        _indexOfListener : function (listener, context) {\n            var n = this._bindings.length,\n                cur;\n            while (n--) {\n                cur = this._bindings[n];\n                if (cur._listener === listener && cur.context === context) {\n                    return n;\n                }\n            }\n            return -1;\n        },\n\n        /**\n         * Check if listener was attached to Signal.\n         * @param {Function} listener\n         * @param {Object} [context]\n         * @return {boolean} if Signal has the specified listener.\n         */\n        has : function (listener, context) {\n            return this._indexOfListener(listener, context) !== -1;\n        },\n\n        /**\n         * Add a listener to the signal.\n         * @param {Function} listener Signal handler function.\n         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)\n         * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n         */\n        add : function (listener, listenerContext, priority) {\n            validateListener(listener, 'add');\n            return this._registerListener(listener, false, listenerContext, priority);\n        },\n\n        /**\n         * Add listener to the signal that should be removed after first execution (will be executed only once).\n         * @param {Function} listener Signal handler function.\n         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)\n         * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n         */\n        addOnce : function (listener, listenerContext, priority) {\n            validateListener(listener, 'addOnce');\n            return this._registerListener(listener, true, listenerContext, priority);\n        },\n\n        /**\n         * Remove a single listener from the dispatch queue.\n         * @param {Function} listener Handler function that should be removed.\n         * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).\n         * @return {Function} Listener handler function.\n         */\n        remove : function (listener, context) {\n            validateListener(listener, 'remove');\n\n            var i = this._indexOfListener(listener, context);\n            if (i !== -1) {\n                this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal\n                this._bindings.splice(i, 1);\n            }\n            return listener;\n        },\n\n        /**\n         * Remove all listeners from the Signal.\n         */\n        removeAll : function () {\n            var n = this._bindings.length;\n            while (n--) {\n                this._bindings[n]._destroy();\n            }\n            this._bindings.length = 0;\n        },\n\n        /**\n         * @return {number} Number of listeners attached to the Signal.\n         */\n        getNumListeners : function () {\n            return this._bindings.length;\n        },\n\n        /**\n         * Stop propagation of the event, blocking the dispatch to next listeners on the queue.\n         * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>\n         * @see Signal.prototype.disable\n         */\n        halt : function () {\n            this._shouldPropagate = false;\n        },\n\n        /**\n         * Dispatch/Broadcast Signal to all listeners added to the queue.\n         * @param {...*} [params] Parameters that should be passed to each handler.\n         */\n        dispatch : function (params) {\n            if (! this.active) {\n                return;\n            }\n\n            var paramsArr = Array.prototype.slice.call(arguments),\n                n = this._bindings.length,\n                bindings;\n\n            if (this.memorize) {\n                this._prevParams = paramsArr;\n            }\n\n            if (! n) {\n                //should come after memorize\n                return;\n            }\n\n            bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch\n            this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.\n\n            //execute all callbacks until end of the list or until a callback returns `false` or stops propagation\n            //reverse loop since listeners with higher priority will be added at the end of the list\n            do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);\n        },\n\n        /**\n         * Forget memorized arguments.\n         * @see Signal.memorize\n         */\n        forget : function(){\n            this._prevParams = null;\n        },\n\n        /**\n         * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).\n         * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>\n         */\n        dispose : function () {\n            this.removeAll();\n            delete this._bindings;\n            delete this._prevParams;\n        },\n\n        /**\n         * @return {string} String representation of the object.\n         */\n        toString : function () {\n            return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';\n        }\n\n    };\n\n\n    // Namespace -----------------------------------------------------\n    //================================================================\n\n    /**\n     * Signals namespace\n     * @namespace\n     * @name signals\n     */\n    var signals = Signal;\n\n    /**\n     * Custom event broadcaster\n     * @see Signal\n     */\n    // alias for backwards compatibility (see #gh-44)\n    signals.Signal = Signal;\n\n\n\n    //exports to multiple environments\n    if(typeof define === 'function' && define.amd){ //AMD\n        define(function () { return signals; });\n    } else if (typeof module !== 'undefined' && module.exports){ //node\n        module.exports = signals;\n    } else { //browser\n        //use string because of Google closure compiler ADVANCED_MODE\n        /*jslint sub:true */\n        global['signals'] = signals;\n    }\n\n}(this));\n\n},{}],11:[function(require,module,exports){\nvar els = {\n\tplayer : document.getElementsByClassName('text--player')[0],\n\tgeneral : document.getElementsByClassName('text--general')[0],\n\tai : document.getElementsByClassName('text--ai')[0]\n};\n\nmodule.exports = function(classPostFix, text) {\n\n\tels[classPostFix].innerHTML = text;\n};\n},{}]},{},[7])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"sourceRoot":"/source/"}